#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('websocket:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */
let userList = [];
io.on('connection', function (client) {
  
  
  client.on('event', function (data) {
    console.log(`${data.name}已登录`);
    // client.emit('system',`欢迎${data.name}加入聊天室`)
    
    if(userList.indexOf(data.name)==-1){
      userList.push(data.name)
    }
    userList.forEach(element => {
      console.log(element+'在线')
    });
     io.sockets.emit("system", `欢迎${data.name}加入聊天室`);
    
    
  });
  client.on('Csend', function (data) {
    console.log(data)
    console.log(userList)
    io.sockets.emit("Ssend", { name: data.name, msg: data.msg,friLisht:userList });
  })
  // client.on('onlinelist', function (data) {
  //   console.log(data)
    
  //   io.sockets.emit("Ssend", { name: data.name, msg: data.msg });
  // })
  // setInterval(()=>{
  //   io.sockets.emit("isonline");
  // },5000)
  client.on('disconnect', function (data) {
    // console.log(this)
    console.log(`已离线`);
  });
});
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
